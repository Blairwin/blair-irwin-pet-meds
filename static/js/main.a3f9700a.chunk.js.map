{"version":3,"sources":["firebaseApp.js","FooterSection.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","FooterSection","className","href","Component","Header","App","handleDateChange","event","setState","date","target","value","handleTimeChange","time","handlePetNameChange","petName","handleMedicationChange","medication","handleDosageChange","dosage","handleNotesChange","notes","handleClick","preventDefault","database","ref","push","state","doses","on","response","data","val","newState","key","doseId","child","remove","action","htmlFor","type","id","onChange","this","onClick","map","dose","removeDose","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+VAYAA,IAASC,cAVc,CACtBC,OAAQ,0CACRC,WAAY,wCACZC,YAAa,+CACbC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,8CAKOR,QAAf,ECQeS,E,iLAhBP,OACI,yBAAKC,UAAU,iBACX,gCACI,kCACI,uBAAGC,KAAK,yBAAR,gBADJ,6BAE2B,IACvB,uBAAGA,KAAK,gCAAR,WACI,uBAAGD,UAAU,sB,GAVbE,aCabC,E,iLATb,OACC,4BAAQH,UAAU,UACjB,uBAAGA,UAAU,cACb,iD,GALiBE,aC0MNE,G,kBAvMd,aAAe,IAAD,8BACb,+CAiCDC,iBAAmB,SAAAC,GAClB,EAAKC,SAAS,CAAEC,KAAMF,EAAMG,OAAOC,SAnCtB,EAsCdC,iBAAmB,SAAAL,GAClB,EAAKC,SAAS,CAAEK,KAAMN,EAAMG,OAAOC,SAvCtB,EA0CdG,oBAAsB,SAAAP,GACrB,EAAKC,SAAS,CAAEO,QAASR,EAAMG,OAAOC,SA3CzB,EA8CdK,uBAAyB,SAAAT,GACxB,EAAKC,SAAS,CAAES,WAAYV,EAAMG,OAAOC,SA/C5B,EAiDdO,mBAAqB,SAAAX,GACpB,EAAKC,SAAS,CAAEW,OAAQZ,EAAMG,OAAOC,SAlDxB,EAoDdS,kBAAoB,SAAAb,GACnB,EAAKC,SAAS,CAAEa,MAAOd,EAAMG,OAAOC,SArDvB,EAwDdW,YAAc,SAAAf,GACbA,EAAMgB,iBACQhC,EAASiC,WAAWC,MAC5BC,KAAK,EAAKC,OAChB,EAAKnB,SAAS,CACbC,KAAM,GACNI,KAAM,GACNE,QAAS,GACTE,WAAY,GACZE,OAAQ,GACRE,MAAO,MAhER,EAAKM,MAAQ,CACZC,MAAO,GACPnB,KAAM,GACNI,KAAM,GACNE,QAAS,GACTE,WAAY,GACZE,OAAQ,GACRE,MAAO,IATK,E,iFAaO,IAAD,OACL9B,EAASiC,WAAWC,MAE5BI,GAAG,SAAS,SAACC,GAClB,IAAMC,EAAOD,EAASE,MAChBC,EAAW,GAEjB,IAAK,IAAIC,KAAOH,EAAM,CACrB,IAAMH,EAAK,aACVM,IAAKA,GACFH,EAAKG,IAGTD,EAASP,KAAKE,GAEd,EAAKpB,SAAS,CACboB,MAAOK,S,iCAyCAE,GACI5C,EAASiC,WAAWC,MAC5BW,MAAMD,GAAQE,W,+BAGX,IAAD,OACR,OACC,yBAAKpC,UAAU,OACd,yBAAKA,UAAU,eACd,yBAAKA,UAAU,iBACd,kBAAC,EAAD,MACA,8BACC,uBAAGA,UAAU,YAAb,uEAIA,0BAAMqC,OAAO,UACZ,yBAAKrC,UAAU,mBACd,2BAAOsC,QAAQ,QACd,oDAED,2BACCC,KAAK,OACLC,GAAG,OACHC,SAAUC,KAAKrC,iBACfK,MAAOgC,KAAKhB,MAAMlB,QAGpB,yBAAKR,UAAU,mBACd,2BAAOsC,QAAQ,QACd,oDAED,2BACCC,KAAK,OACLC,GAAG,OACHC,SAAUC,KAAK/B,iBACfD,MAAOgC,KAAKhB,MAAMd,QAGpB,yBAAKZ,UAAU,mBACd,2BAAOsC,QAAQ,WACd,gDAED,2BACCC,KAAK,OACLC,GAAG,UACHC,SAAUC,KAAK7B,oBACfH,MAAOgC,KAAKhB,MAAMZ,WAGpB,yBAAKd,UAAU,mBACd,2BAAOsC,QAAQ,cACd,gDAED,2BACCC,KAAK,OACLC,GAAG,aACHC,SAAUC,KAAK3B,uBACfL,MAAOgC,KAAKhB,MAAMV,cAGpB,yBAAKhB,UAAU,mBACd,2BAAOsC,QAAQ,UACd,4CAED,2BACCC,KAAK,OACLC,GAAG,SACHC,SAAUC,KAAKzB,mBACfP,MAAOgC,KAAKhB,MAAMR,UAGpB,yBAAKlB,UAAU,mBACd,2BAAOsC,QAAQ,SACd,2CAED,2BACCC,KAAK,OACLC,GAAG,QACHC,SAAUC,KAAKvB,kBACfT,MAAOgC,KAAKhB,MAAMN,SAGpB,4BAAQuB,QAASD,KAAKrB,YAAakB,KAAK,UACvC,uBAAGvC,UAAU,cADd,WAGC,uBAAGA,UAAU,gBAGf,4BACE0C,KAAKhB,MAAMC,MAAMiB,KAAI,SAAAC,GACrB,OACC,6BACC,wBAAI7C,UAAU,aAAaiC,IAAKY,EAAKZ,KACpC,2BACC,yCADD,IACyBY,EAAKrC,MAE9B,2BACC,yCADD,IACyBqC,EAAKjC,MAE9B,2BACC,yCADD,IACyBiC,EAAK/B,SAE9B,2BACC,+CADD,IAC+B+B,EAAK7B,YAEpC,2BACC,2CADD,IAC2B6B,EAAK3B,QAEhC,2BACC,0CADD,IAC0B2B,EAAKzB,OAE/B,4BAAQuB,QAAS,kBAAM,EAAKG,WAAWD,EAAKZ,OAA5C,6BAWR,kBAAC,EAAD,W,GAlMc/B,cCKE6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a3f9700a.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst firebaseConfig = {\n\tapiKey: \"AIzaSyAH0VBW0AFgnFDMiYv0JI70Sl_PRoWkack\",\n\tauthDomain: \"blair-irwin-project-5.firebaseapp.com\",\n\tdatabaseURL: \"https://blair-irwin-project-5.firebaseio.com\",\n\tprojectId: \"blair-irwin-project-5\",\n\tstorageBucket: \"blair-irwin-project-5.appspot.com\",\n\tmessagingSenderId: \"643418644752\",\n\tappId: \"1:643418644752:web:705d598f3d9d18b82e0595\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from \"react\";\nimport \"./App.js\";\n\nclass FooterSection extends Component {\n\n    render() {\n        return(\n            <div className=\"footerWrapper\">\n                <footer>\n                    <p>&copy; \n                        <a href=\"http://blaircodes.com\">Blair Irwin </a>\n                    March 2020, with thanks to{\" \"}\n                        <a href=\"https://firebase.google.com/\">firebase \n                            <i className=\"fa fa-paw\"></i>\n                        </a>\n                    </p>\n                </footer>\n            </div>\n        )\n    }\n}\n\nexport default FooterSection; \n\n","import React, { Component } from \"react\";\nimport \"./App.js\";\n\n// ***Note... I know this likely wouldn't be a component... but my app is so straight forward/short that I had to pick a few to put in!***\n\nclass Header extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<header className=\"h1Flex\">\n\t\t\t\t<i className=\"fa fa-paw\"></i>\n\t\t\t\t<h1>Pet Meds Log</h1>\n\t\t\t</header>\n\t\t)\n\t}\n}\n\nexport default Header;\n","import React, { Component} from 'react';\nimport './App.css';\nimport firebase from './firebaseApp';\nimport FooterSection from \"./FooterSection\";\nimport Header from \"./Header\";\nimport FormSection from \"./FormSection\";\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tdoses: [],\n\t\t\tdate: \"\",\n\t\t\ttime: \"\",\n\t\t\tpetName: \"\",\n\t\t\tmedication: \"\",\n\t\t\tdosage: \"\",\n\t\t\tnotes: \"\"\n\t\t};\n\t\t\n\t}\n\tcomponentDidMount() {\n\t\tconst dbRef = firebase.database().ref();\n\n\t\tdbRef.on(\"value\", (response) => {\n\t\t\tconst data = response.val();\n\t\t\tconst newState = [];\n\t\t\t\n\t\t\tfor (let key in data) {\n\t\t\t\tconst doses = {\n\t\t\t\t\tkey: key,\n\t\t\t\t\t...data[key]\n\t\t\t\t} \n\n\t\t\t\tnewState.push(doses);\n\t\t\t}\n\t\t\t\tthis.setState({\n\t\t\t\t\tdoses: newState,\n\t\t\t});\n\t\t});\n\t}\n\n\thandleDateChange = event => {\n\t\tthis.setState({ date: event.target.value });\n\t};\n\n\thandleTimeChange = event => {\n\t\tthis.setState({ time: event.target.value });\n\t};\n\n\thandlePetNameChange = event => {\n\t\tthis.setState({ petName: event.target.value });\n\t};\n\n\thandleMedicationChange = event => {\n\t\tthis.setState({ medication: event.target.value });\n\t};\n\thandleDosageChange = event => {\n\t\tthis.setState({ dosage: event.target.value });\n\t};\n\thandleNotesChange = event => {\n\t\tthis.setState({ notes: event.target.value });\n\t};\n\n\thandleClick = event => {\n\t\tevent.preventDefault();\n\t\tconst dbRef = firebase.database().ref();\n\t\tdbRef.push(this.state);\n\t\tthis.setState({\n\t\t\tdate: \"\",\n\t\t\ttime: \"\",\n\t\t\tpetName: \"\",\n\t\t\tmedication: \"\",\n\t\t\tdosage: \"\",\n\t\t\tnotes: \"\"\n\t\t});\n\t};\n\n\tremoveDose(doseId) {\n\t\tconst dbRef = firebase.database().ref();\n\t\tdbRef.child(doseId).remove();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"mainWrapper\">\n\t\t\t\t\t<div className=\"flexContainer\">\n\t\t\t\t\t\t<Header />\n\t\t\t\t\t\t<main>\n\t\t\t\t\t\t\t<p className=\"centered\">\n\t\t\t\t\t\t\t\tEnter the information below to save it to your pet's medication\n\t\t\t\t\t\t\t\tlog\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<form action=\"submit\">\n\t\t\t\t\t\t\t\t<div className=\"inputFlexParent\">\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"date\">\n\t\t\t\t\t\t\t\t\t\t<strong>Enter the date:</strong>\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"date\"\n\t\t\t\t\t\t\t\t\t\tid=\"date\"\n\t\t\t\t\t\t\t\t\t\tonChange={this.handleDateChange}\n\t\t\t\t\t\t\t\t\t\tvalue={this.state.date}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"inputFlexParent\">\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"time\">\n\t\t\t\t\t\t\t\t\t\t<strong>Enter the time:</strong>\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"time\"\n\t\t\t\t\t\t\t\t\t\tid=\"time\"\n\t\t\t\t\t\t\t\t\t\tonChange={this.handleTimeChange}\n\t\t\t\t\t\t\t\t\t\tvalue={this.state.time}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"inputFlexParent\">\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"petName\">\n\t\t\t\t\t\t\t\t\t\t<strong>Pet's name:</strong>\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\tid=\"petName\"\n\t\t\t\t\t\t\t\t\t\tonChange={this.handlePetNameChange}\n\t\t\t\t\t\t\t\t\t\tvalue={this.state.petName}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"inputFlexParent\">\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"medication\">\n\t\t\t\t\t\t\t\t\t\t<strong>Medication:</strong>\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\tid=\"medication\"\n\t\t\t\t\t\t\t\t\t\tonChange={this.handleMedicationChange}\n\t\t\t\t\t\t\t\t\t\tvalue={this.state.medication}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"inputFlexParent\">\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"dosage\">\n\t\t\t\t\t\t\t\t\t\t<strong>Dosage:</strong>\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\tid=\"dosage\"\n\t\t\t\t\t\t\t\t\t\tonChange={this.handleDosageChange}\n\t\t\t\t\t\t\t\t\t\tvalue={this.state.dosage}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"inputFlexParent\">\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"notes\">\n\t\t\t\t\t\t\t\t\t\t<strong>Notes:</strong>\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\tid=\"notes\"\n\t\t\t\t\t\t\t\t\t\tonChange={this.handleNotesChange}\n\t\t\t\t\t\t\t\t\t\tvalue={this.state.notes}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<button onClick={this.handleClick} type=\"submit\">\n\t\t\t\t\t\t\t\t\t<i className=\"fa fa-paw\"></i>\n\t\t\t\t\t\t\t\t\tAdd Dose \n\t\t\t\t\t\t\t\t\t<i className=\"fa fa-paw\"></i>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t{this.state.doses.map(dose => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<li className=\"resultCard\" key={dose.key}>\n\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<strong>Date:</strong> {dose.date}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<strong>Time:</strong> {dose.time}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<strong>Name:</strong> {dose.petName}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<strong>Medication:</strong> {dose.medication}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<strong>Dosage:</strong> {dose.dosage}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<strong>Notes:</strong> {dose.notes}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t<button onClick={() => this.removeDose(dose.key)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\tRemove This Dose\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</main>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<FooterSection />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}